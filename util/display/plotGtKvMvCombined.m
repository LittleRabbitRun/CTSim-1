function plotGtKvMvCombined(imgGt, imgKv, imgMv, imgCombined, initialWindow, mainTitle, transpose)
% Copyright (c) 2011 by Andreas Keil, Stanford University.


%% Check Input Arguments

if nargin < 7
	transpose = true;
elseif ~isscalar(transpose) || ~islogical(transpose)
	error('If specified, "transpose" has to be either "true" or "false"!');
end

if nargin < 6
	mainTitle = '[unnamed phantom]';
elseif ~ischar(mainTitle)
	error('If specified, "mainTitle" has to be a string!');
end

if nargin < 5 || ~isvector(initialWindow) || ~isreal(initialWindow) || initialWindow(2) <= initialWindow(1)
	error('"initialWindow" has to be a 2-vector of intensities to window on!');
end

if ~ismatrix(imgGt) || ~ismatrix(imgKv) || ~ismatrix(imgMv) || ~ismatrix(imgCombined) ...
		|| ~isnumeric(imgGt) || ~isnumeric(imgKv) || ~isnumeric(imgMv) || ~isnumeric(imgCombined)
	error('All images have to be numeric matrices!');
end


%% Transpose Images

if transpose
	imgGt = imgGt';
	imgKv = imgKv';
	imgMv = imgMv';
	imgCombined = imgCombined';
end


%% Generate Plots

% create figure of the right size and at the right position
screenSize = get(0, 'ScreenSize');
figureWidth = round(0.9*screenSize(3)); % use 90% of screen width
figureHeight = round(0.28*figureWidth + 83); % choose right aspect ratio and add some pixels for menu and toolbar
figureLeft = round(screenSize(3) - figureWidth)/2;
figureBottom = round(screenSize(4) - figureHeight)/2;
hFigure = figure('Name', mainTitle, 'NumberTitle', 'off', ...
	'Position', [figureLeft figureBottom figureWidth figureHeight], ...
	'Toolbar', 'figure', ...
	'Tag', 'FigureGtKvMVCombined');
zoom on;

% create subplots
plotTotalHeight = 0.85;
controlsHeight = 1-plotTotalHeight;
plotHeight = 0.9*plotTotalHeight;
plotTotalWidth = 0.95;
noPlots = 4;
plotWidth = plotTotalWidth/noPlots;
plotHalfSpacing = (1-plotTotalWidth)/(2*noPlots);
plotFullSpacing = 2*plotHalfSpacing;

left = plotHalfSpacing;
hAxes1 = subplot('Position', [left controlsHeight plotWidth plotHeight]);
imshow(imgGt, initialWindow);
title('Ground truth');
set(hAxes1, 'Tag', 'WCW_axes_Gt');

left = plotHalfSpacing+plotWidth+plotFullSpacing;
hAxes2 = subplot('Position', [left controlsHeight plotWidth plotHeight]);
imshow(imgKv, initialWindow);
title('Recon from keV data only');
set(hAxes2, 'Tag', 'WCW_axes_Kv');

left = plotHalfSpacing+plotWidth+plotFullSpacing+plotWidth+plotFullSpacing;
hAxes3 = subplot('Position', [left controlsHeight plotWidth plotHeight]);
imshow(imgMv, initialWindow);
title('Recon from MeV data only');
set(hAxes3, 'Tag', 'WCW_axes_Mv');

left = plotHalfSpacing+plotWidth+plotFullSpacing+plotWidth+plotFullSpacing+plotWidth+plotFullSpacing;
hAxes4 = subplot('Position', [left controlsHeight plotWidth plotHeight]);
imshow(imgCombined, initialWindow, 'Parent', hAxes4);
title('Recon from keV and MeV data');
set(hAxes4, 'Tag', 'WCW_axes_Combined')

% link limits of all axes so that zoom stays in sync
linkaxes([hAxes1 hAxes2 hAxes3 hAxes4]);

% create controls
controlSmallWidthRatio = 0.7;
controlFullWidth = 0.95/(2+controlSmallWidthRatio);
controlSmallWidth = controlSmallWidthRatio*controlFullWidth;
controlHalfSpacing = (1-2*controlFullWidth-controlSmallWidth)/6;
controlFullSpacing = controlHalfSpacing*2;

% window center control
left = controlHalfSpacing;
annotation(hFigure, 'textbox', ...
	'Position', [left controlsHeight/2 controlFullWidth controlsHeight/2], ...
	'LineStyle', 'none', ...
	'HorizontalAlignment', 'left', ...
	'VerticalAlignment', 'bottom', ...
	'String', 'Window Center (HU)', ...
	'Tag', 'AnnotationWindowCenter');
uicontrol(hFigure, 'Style', 'edit', ...
	'Value', mean(initialWindow), ...
	'String', mean(initialWindow), ...
	'FontSize', 10, ...
	'Units', 'normalized', ...
	'Position', [left+7/8*controlFullWidth controlsHeight/2 controlFullWidth/8 controlsHeight/4], ...
	'HorizontalAlignment', 'right', ...
	'Callback', @callbackWindowCenterWidth, ...
	'Tag', 'WCW_control_windowCenter_edit');
uicontrol(hFigure, 'Style', 'slider', ...
	'Min', -1000, 'Max', 9000, ...
	'SliderStep', [0.002 0.02], ...
	'Value', mean(initialWindow), ...
	'Units', 'normalized', ...
	'Position', [left controlsHeight/4 controlFullWidth controlsHeight/4], ...
	'Callback', @callbackWindowCenterWidth, ...
	'Tag', 'WCW_control_windowCenter_slider');

% window annotation and reset button
left = controlHalfSpacing+controlFullWidth+controlFullSpacing;
annotation(hFigure, 'textbox', ...
	'Position', [left controlsHeight/2 controlSmallWidth controlsHeight/2], ...
	'LineStyle', 'none', ...
	'HorizontalAlignment', 'center', ...
	'VerticalAlignment', 'bottom', ...
	'Tag', 'WCW_annotation_window');
uicontrol(hFigure, 'Style', 'pushbutton', ...
	'Value', [mean(initialWindow), initialWindow(2)-initialWindow(1)], ...
	'String', 'Reset', ...
	'Units', 'normalized', ...
	'Position', [left+controlSmallWidth/3 controlsHeight/4 controlSmallWidth/3 controlsHeight/4], ...
	'HorizontalAlignment', 'center', ...
	'Callback', {@callbackWindowCenterWidth, mean(initialWindow), initialWindow(2)-initialWindow(1)}, ...
	'Tag', 'WCW_control_windowReset');

% window width control
left = controlHalfSpacing+controlFullWidth+controlFullSpacing+controlSmallWidth+controlFullSpacing;
annotation(hFigure, 'textbox', ...
	'Position', [left controlsHeight/2 controlFullWidth controlsHeight/2], ...
	'LineStyle', 'none', ...
	'HorizontalAlignment', 'left', ...
	'VerticalAlignment', 'bottom', ...
	'String', 'Window Width (HU)', ...
	'Tag', 'AnnotationWindowWidth');
uicontrol(hFigure, 'Style', 'edit', ...
	'Value', initialWindow(2)-initialWindow(1), ...
	'String', initialWindow(2)-initialWindow(1), ...
	'FontSize', 10, ...
	'Units', 'normalized', ...
	'Position', [left+7/8*controlFullWidth controlsHeight/2 controlFullWidth/8 controlsHeight/4], ...
	'HorizontalAlignment', 'right', ...
	'Callback', @callbackWindowCenterWidth, ...
	'Tag', 'WCW_control_windowWidth_edit');
uicontrol(hFigure, 'Style', 'slider', ...
	'Min', 1, 'Max', 10001, ...
	'SliderStep', [0.005 0.05], ...
	'Value', initialWindow(2)-initialWindow(1), ...
	'Units', 'normalized', ...
	'Position', [left controlsHeight/4 controlFullWidth controlsHeight/4], ...
	'Callback', @callbackWindowCenterWidth, ...
	'Tag', 'WCW_control_windowWidth_slider');

% save handles for later use in callbacks
myHandles = guihandles(hFigure);
guidata(hFigure, myHandles);

% initialize figure
callbackWindowCenterWidth(hFigure);
